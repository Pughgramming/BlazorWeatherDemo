@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JS
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using BlazorWeatherDemo.Common

<PageTitle>Local Weather</PageTitle>

<h1 class="header">Your Local Weather 🌞</h1>


@if (location != null)
{
    <p class="fade-in">Your local weather for: Lat: @location?.Latitude | Long: @location?.Longitude</p>
}
else if (location != null && !location.Success)
{
    <p class="fade-in">We couldn't access your location: @location.Message</p>
}
else
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p class="loading-text">Getting your 5-day forecast... hang tight 👀</p>
    </div>
}

@if (location != null && forecasts != null)
{
    @for (int i = 0; i < forecasts.Length; i++)
    {
        var forecast = forecasts[i];
        var delay = 0.2 * i; // Delay in seconds
        var weatherClass = GetWeatherClass(forecast.Condition);

        <div class="forecast-card fade-in @weatherClass" style="animation-delay: @($"{delay:0.0}s")">
            <h4>@forecast.Date.ToString("dddd, M/d/yyyy")</h4>
            <p><strong>Temp: </strong> @forecast.TemperatureF &deg;F</p>
            <p><strong>Condition: </strong> @forecast.Condition</p>
        </div>
    }
}

@code {
    private WeatherForecast[]? forecasts;
    private LocationResult? location;
    private bool hasCalledJs = false;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
            }).ToArray();

        foreach (var forecast in forecasts)
        {
            forecast.Condition = GenerateWeatherCondition();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Called");
        if (firstRender && !hasCalledJs)
        {
            hasCalledJs = true;
            try
            {
                Thread.Sleep(1500); // Simulate a delay to show the loading state
                location = await JS.InvokeAsync<LocationResult>("getUserLocation");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting location: {ex.Message}");
            }
        }
    }

    string GenerateWeatherCondition()
    {
        return Random.Shared.Next(0, 6) switch
        {
            0 => Enums.WeatherCondition.Sunny.ToString(),
            1 => Enums.WeatherCondition.Cloudy.ToString(),
            2 => Enums.WeatherCondition.Rainy.ToString(),
            3 => Enums.WeatherCondition.Snowy.ToString(),
            4 => Enums.WeatherCondition.Stormy.ToString(),
            _ => Enums.WeatherCondition.Windy.ToString()
        };
    }

    string GetWeatherClass(string condition)
    {
        condition = condition.ToLower();
        if (condition.Contains("sun") || condition.Contains("clear")) return "sunny";
        if (condition.Contains("cloud")) return "cloudy";
        if (condition.Contains("rain")) return "rainy";
        if (condition.Contains("snow")) return "snowy";
        if (condition.Contains("storm") || condition.Contains("thunder")) return "stormy";
        return "default-weather";
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Condition { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public class LocationResult
    {
        public bool Success { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string? Message { get; set; }
    }
}
